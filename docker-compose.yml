services:
  # db:
  #   image: postgres:latest
  #   container_name: observe-db
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_DB: ${OBSERVE_DB_DATABASE}
  #     POSTGRES_USER: ${OBSERVE_DB_USERNAME}
  #     POSTGRES_PASSWORD: ${OBSERVE_DB_PASSWORD}
  #   ports:
  #     - "${OBSERVE_DB_PORT}:5432"
  #   volumes:
  #     - db-data:/var/lib/postgresql/data
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5

  adminer:
    image: adminer
    restart: unless-stopped
    ports:
      - "8081:8080"

  observe_api:
    build: .
    container_name: observe-api
    restart: unless-stopped
    # depends_on:
    #   db:
    #     condition: service_healthy
    environment:
      OBSERVE_API_PORT: ${OBSERVE_API_PORT}
      OBSERVE_DB_DATABASE: ${OBSERVE_DB_DATABASE}
      OBSERVE_DB_PASSWORD: ${OBSERVE_DB_PASSWORD}
      OBSERVE_DB_USERNAME: ${OBSERVE_DB_USERNAME}
      OBSERVE_DB_PORT: ${OBSERVE_DB_PORT}
      OBSERVE_DB_HOST: ${OBSERVE_DB_HOST}
      OBSERVE_DB_SCHEMA: ${OBSERVE_DB_SCHEMA}
      OBSERVE_HASH_SECRET: ${OBSERVE_HASH_SECRET}
    ports:
      - "9000:8080"

  migrate:
    image: migrate/migrate
    environment:
      POSTGRES_DB: ${OBSERVE_DB_DATABASE}
      POSTGRES_HOST: ${OBSERVE_DB_HOST}
      POSTGRES_PORT: ${OBSERVE_DB_PORT}
      POSTGRES_USER: ${OBSERVE_DB_USERNAME}
      POSTGRES_PASSWORD: ${OBSERVE_DB_PASSWORD}
    volumes:
      - ./migrations:/migrations
    # depends_on:
    #   db:
    #     condition: service_healthy
    command:
      [
        "-path",
        "/migrations",
        "-database",
        "postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@POSTGRES_HOST:POSTGRES_PORT/$POSTGRES_DB?sslmode=disable",
        "up",
      ]
# volumes:
#   db-data:
